Wanna watch me code Episode X
Decentralized network, health check
1. Create the project, rust
	Done
2. Define the network protocol
	1. Custom network protocol
	2. UDP
		Done
3. Create serialization and deserialization of packet
	Done
3.1 Writ tests for serialization and deserialization.
4. health check - UDP integration
	1. A request sent to remote host
		PoC done
	2. Send response if it is running, alive, and healthy
		Poc Done
	3. Get response, update our routing table
		TODO
4.1 Create message broker
	Done
4.2 Create consumers of message broker messages
	1. Receive the message broker message
		Done
	2. Perform handling of message
		Basically health_check file
		Added Syn handler - Done


https://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
508 bytes max packet size


|HEADER|Nonce  |
|8 bits|128 bits|
|0x01  |


Silent Coding Session 1
Not sure what I am going to focus on today,
1. will start with some cleanup of some of the warnings and commiting our changes
    Done... mostly
A few other topics might be testing,
    network table,
    performance testing,
2.  encapsulating logic in main methods into another class
    Done, put logic into factory function and wrapped broker and listners in single HealthCheckStack.

Break Time!

Though of something, wondering how rust handles unawaited threads, From what I recall reading, once you leave scope
most things are cleaned up. So curious how threads would be handled.
Potential Hypothesis's
1. If you don't join the thread will it automatically close once the scope is left?
    This is what I am guessing happens in rust.
        Result - This is what happened
2. Will the thread continue to run in the background, blocking program termination
    I think this is what happens in C? Not sure though
        Result - Not what happens in rust
To test we're just going to remove the joins from the test main method, and send a large amount of requests that
will be processed async by the listener.

Another break time!

Let's look into how we should build the network store
For initial, planning on using just a hashmap, but need to be considerate of concurrent access

1. Going to create a repo for this and backup first
2. Add MIT license
3.

Ok, so what I actually am going to do now is get the main method setup to run everything as a single instance instead
of starting up two instances. This way they'll run in seperate processes and better emulate how this will run
in the real world.

Going to take a break, but we were able to a single server setup running, with a little stdin that triggers a self health
check on new line.

After break

Was thinking about how to share the network table between all of our threads. I'm relatively new to channels,
so was thinking of ways I could use that. But I think a better approach is to use the typical locking mechanisms on
shared objects, like mutexes. What I want to do for this component is not really message based, so channels don't seem
like the right choice.

Later:

We wrote the network table, and refactored some of the logic.


While away I added some timestamps to the main code for each health request. It's pretty quick...
Although the measurement is the amount of time it took to write to the request sender channel
and return control back to the main thread, so it does not measure the round trip latency of the
actual health check "handshake". But, this is actually a really good thing, as it's super quick to return
control back to the main thread, so it can continue executing other commands while the health check happens in the
background.

I want to make it so that the nonce is autogenerated for each health check request, but not sure where to add it.
I can add it to the main code for now, then figure out how to structure the final implementation.

Generate Nonce: Done
I feel like I'm getting desensitized to how efficient rust is, these numbers are nuts. 14.6 us, not ms, microseconds!.
Anyway, let's get this committed and wrap up.

Goodnight everyone!

Episode 4202024

421

So just finished setting up the print network command. Had to do it differently than I would have in other languages.
Wanted to use more dependency injection, but the borrow checker and ownership controls I think are actually intended
to prevent that type of sharing data. Just feels a little odd that global variables seem to be the proper way of sharing
the network map stack, it's atleast the easiest. Wondering if this will pose any issues in the future.

Anyway, going to take a break from streaming and finish some episodes of south park, have a good rest of your weekends!

// The remaining warnings are things I know about
// Most are related to the example which are unused, but all it takes is uncommenting one line
// in main and they would be used.
// Some others are for future usage potentially, like the one below with network command unused args
// Then some constants that were used for defaults in some of my earlier testing.
// Nothing really significant, or unknown, so all good to ignore. Would just be nice to have absolutely no
// warnings on build ;)/<PO|\!.

Saving for later...

Episode 4/21 pt 2 Http hosting
we'll try hyper, like that it's at v1.0 atleast, we'll see how it is. Only have experience with acix

Oh also, to explain why we are creating a new http server in the first place...
I think I explained this yesterday, but potentially while I was unintentionally muted
but, I want to be able to transfer entire network tables between nodes. This is how our network discovery will work.

Once a remote server discovers you, it would be able to request you to provide your network table of hosts you know about.
From there they will perform a health check on each of the hosts you provided in the map and if they are healthy will be
added to their network table, thus expanding their context of the entire network through peer network table sharing.

Let me add this to the readme, and rename this episode. BRB...

Welcome to WannaWacthMeCode!!!! Today we will be updating this readme
with an overview of what I see for this project, and where it came from.

Episode - Network map api's
Today we will be creating the api's for sharing network tables between hosts.
These will be http based so we don't have to worry about the data integrity
like we would with udp.

Let's get started!
...

So got the http server running now, prints the network stack but does it with the debug, so not real json format

Had some issues with the serde serialization on the hashmap though. Taking a break...

let's fix the serialization...



